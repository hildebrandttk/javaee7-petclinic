apply plugin: 'java'
apply plugin: 'war'

dependencies {
   compile "org.richfaces:richfaces:$richfacesVersion"
   compile "net.sourceforge.cssparser:cssparser:0.9.13"
   compile "org.jboss.spec.javax.faces:jboss-jsf-api_2.2_spec:2.2.4"
   compile "org.webjars:bootstrap:$webJarsBootstrapVersion"
   compile "org.webjars:jquery:$webJarsJQueryVersion"
   compile group: 'fm.void.jetm', name:'jetm', version: '1.2.3'
   compile group: 'fm.void.jetm', name:'jetm-optional', version: '1.2.3'
   runtime "org.jboss.logging:jboss-logging:3.1.4.GA"
   providedCompile "javax.enterprise:cdi-api:1.1"
   providedCompile "javax:javaee-web-api:7.0"
   providedCompile "org.jboss.spec.javax.servlet:jboss-servlet-api_3.1_spec:1.0.0.Final"
   providedCompile "org.jboss.spec.javax.annotation:jboss-annotations-api_1.2_spec:1.0.0.Final"
   providedCompile "org.jboss.resteasy:resteasy-atom-provider:3.0.8.Final"
   providedCompile "org.hibernate:hibernate-validator:5.1.0.Final"
   providedCompile "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final"

//   testCompile "org.richfaces:richfaces-page-fragments:$richfacesVersion"
//   testCompile "commons-logging:commons-logging:1.1.3"
//   testCompile "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-impl-maven:2.0.2"
//   testCompile "org.jboss.shrinkwrap:shrinkwrap-api:$shrinkwrapShrinkwrapVersion"
//   testCompile "org.jboss.shrinkwrap:shrinkwrap-spi:$shrinkwrapShrinkwrapVersion"
//   testCompile "org.jboss.shrinkwrap:shrinkwrap-impl-base:$shrinkwrapShrinkwrapVersion"
//   testCompile "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api-base:2.0.0-alpha-5"
//   testCompile "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api:1.1.0-alpha-5"
//   testCompile "org.jboss.arquillian:arquillian-bom:$arquillianVersion"
//   testCompile "org.jboss.arquillian.junit:arquillian-junit-container:$arquillianCoreVersion"
//   testCompile "org.jboss.arquillian.protocol:arquillian-protocol-servlet:$arquillianCoreVersion"
   testCompile "junit:junit:$junitVersion"
//   testCompile "org.jboss.arquillian.graphene:graphene-webdriver-api:${grapheneVersion}"
//   testCompile "org.jboss.arquillian.graphene:graphene-webdriver-spi:${grapheneVersion}"
//   testCompile "org.jboss.arquillian.graphene:graphene-webdriver-impl:${grapheneVersion}"
//   testCompile "org.apache.httpcomponents:httpcore:4.2.5"
//   testCompile "xml-apis:xml-apis:1.4.01"
//   testCompile "org.wildfly:wildfly-arquillian-container-remote:$wildflyVersion"
//   testCompile "org.wildfly:wildfly-arquillian-protocol-jmx:$wildflyVersion"
//   testCompile "org.wildfly:wildfly-arquillian-common:$wildflyVersion"
//   testCompile "org.wildfly:wildfly-arquillian-testenricher-msc:$wildflyVersion"
}

configurations {
   all*.exclude group: 'org.hibernate', module: 'hibernate-core'
   all*.exclude group: 'org.hibernate', module: 'hibernate-search-analyzers'
   all*.exclude group: 'org.apache.commons', module: 'commons-compress'
   all*.exclude group: 'org.jboss.logging', module: 'jboss-logging-annotations'
   all*.exclude group: 'com.thoughtworks.paranamer', module: 'paranamer'
}
configurations.all {
   resolutionStrategy {
      force 'org.apache.avro:avro:1.7.6'
      force "org.slf4j:slf4j-api:${slfVersion}"
   }
}

webAppDirName = 'main/webapp'
sourceSets {
   main {
      java {
         srcDir 'main/java'
      }
      resources {
         srcDir 'main/resources'
      }
   }
   test {
      java {
         srcDir 'test/java'
      }
      resources {
         srcDir 'test/resources'
      }
   }
}

test {
   systemProperty 'geb.env', 'phantomjs'
}

apply plugin: 'docker'

configurations {
   driver
   app
}

dependencies {
   driver group: 'com.oracle', name: 'ojdbc6', version: '11.2.0.3'
}

task dockerPetClinicFromWar(type: Docker) {
   baseImage = "registry:5000/jboss-wildfly:10.0.0.Final"
   runCommand 'mkdir -p /opt/jboss/wildfly/standalone/indexes /opt/jboss/wildfly/standalone/data /opt/jboss/wildfly/standalone/log'
   volume '/opt/jboss/wildfly/standalone/indexes'
   volume '/opt/jboss/wildfly/standalone/data'
   volume '/opt/jboss/wildfly/standalone/log'
   addFile {
      into('/opt/jboss/wildfly/standalone/deployments/') {
         from { configurations.driver }
      }
      into('/opt/jboss/wildfly/standalone/deployments/') {
         from { 'src/docker/oracle-ds.xml' }
      }
      into('/opt/jboss/wildfly/standalone/deployments/') {
         from { war.archivePath }
      }
      into('/opt/jboss/') {
         from { 'src/docker/startup.sh' }
      }
   }
   changeUser('root')
   runCommand "echo \"Installing netcat ...\"" +
      " && yum -y install nmap-ncat" +
      " && rm -rf /var/lib/apt/lists/*" +
      " && rm -rf /opt/jboss/wildfly/standalone/data/content/" +
      " && chown jboss /opt/jboss/wildfly/standalone/deployments/*" +
      " && chown jboss -R /opt/jboss/wildfly/standalone/indexes /opt/jboss/wildfly/standalone/data /opt/jboss/wildfly/standalone/log /opt/jboss/wildfly/standalone/deployments/" +
      " && chmod 777 /opt/jboss/wildfly/standalone/indexes /opt/jboss/wildfly/standalone/data /opt/jboss/wildfly/standalone/log /opt/jboss/wildfly/standalone/deployments/" +
      " && chmod 755 /opt/jboss/startup.sh"
   changeUser('jboss')
   defaultCommand = ['/opt/jboss/startup.sh']
   exposePort 8080
   tag = "registry:5000/docker-example-petclinic"
   tagVersion = petclinicVersion
}

dockerPetClinicFromWar.dependsOn {
   tasks.findAll { task -> task.name == 'war' }
}